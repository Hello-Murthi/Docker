
-------------------------------------------------------------------------

docker ps
docker ps -a
docker images
docker stop c-id
docker start c-id
docker rm c-id
docker rmi image-name
docker pull image
docker run image
docker run image sleep 100
sudo docker run -d image sleep 100
sudo docker attach c-id
docker run -it image bash

-------------------------------------------------------------------------

Port Mapping:

sudo docker run -p 2020:8080 jenkins
sudo docker inspect c-id

sudo docker run -p 2020:5000 murthidn/simple-webapp

-------------------------------------------------------------------------

Environment Variables:

docker run -e COLOR=red image

-------------------------------------------------------------------------

Docker Compose:

* When we need to set up complex applications which is running multiple service, better to use Docker Compose
* With a single command, you create and start all the services from your configuration

Ex:

docker run mongodb
docker run redis
docker run ansible

-------------------------------------------------------------------------

docker-compose.yml

services:
	database:
			image: mongodb
	messaging:
			image: redis
			ports:
				- 5000:80
			links:
				- anisble
	orchestration:
			image: ansible

docker-compose up

-------------------------------------------------------------------------

Storage: File System:

/var/lib/docker
	- container
	- images

-------------------------------------------------------------------------

Layered Architecture:

* Each line of dockerfile is a layer
* Each layer is cached

-------------------------------------------------------------------------

Docker Network:

1. Bridge
2. Host
3. None

-------------------------------------------------------------------------

Bridge - Default network:

docker run ubuntu --network=host

* Bridge NW is Private Internal NW on Docker Host
* All container will get attached with an internal IP
* To access these containers from outside, need port mapping 

-------------------------------------------------------------------------

Host Network:

* Container’s network is not isolated from the Docker host
* Container shares the host’s network
* Container does not get its own IP-address allocated. 
* For Ex: if you run a container which binds to port 80 and you use host networking, the container’s application is available on port 80 on the host’s IP address.
* No need any port mapping

-------------------------------------------------------------------------

None Network:

* Containers are not attached to any network
* Doesn't have access to external network/other containers

-------------------------------------------------------------------------

Default IP:

172.17.0.2 - series

-------------------------------------------------------------------------

User Defined Network:

* To isolate containers in our own network

docker network create

-------------------------------------------------------------------------

Container Orchestration:

For a best performance of apps on High Load

High Availability
Load Balancing

-------------------------------------------------------------------------